%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string>
    #include <stdbool.h>
       
    #define YYERROR_VERBOSE 1        
%}

%code {
int yylex (void);
void yyerror ( const IProgram*&, char const * );
}

%error-verbose // более подробная информация об ошибке
%verbose // output-файл с правилами грамматики
%parse-param { const IProgram*& program } // результат работы анализатора
%locations  // Подключаем yylloc без появления @n в коде

%union {

	const IProgram* Program; // Указатель на класс-программу
	const IMainClass* MainClass; // Указатель на главный класс
	const IStatement* Statement;
	const IExpression* Exp;
}

%token CLASS

%token EXTENDS

%token PUBLIC

%token PRINTLN

%token PRINT

%token INT

%token BOOLEAN

%token IF

%token ELSE

%token NUM

%token WHILE

%token TRUE

%token FALSE

%token THIS

%token NEW

%token RETURN

%token ID

%token LPAREN

%token RPAREN

%token LBRACKET

%token RBRACKET

%token LBRACE

%token RBRACE

%token COMMA

%token DOT

%token SEMI

%token COMMENT

%token AND

%token PLUS

%token MINUS

%token TIMES



// Особые (типизированные) токены
%type <Program> Program


%%


Program: 
	MainClass ClassDeclList { program = $$ = new CProgram( $1, $2); };

MainClass: CLASS ID '{'
	PUBLIC 'static' 'void' 'main' '(' 'String' '[' ']' ID ')'
	'{' Statement '}' '}'
	{
		$$ = new CMainClass( $2, $12, $15 );
	}
;

//Список классов
Statement:
	'{' StatementList '}' { $$ = new CCompoundStm) $2 ); }
	| IF '(' Exp ')' Statement T_Else Statement { $$ = new CIfStm}( $3, $5, $7 ); }
	| WHILE '(' Exp ')' Statement { $$ = new CWhileStm( $3, $5 ); }
	| PRINT '(' Exp ')' ';' { $$ = new CPrintStm( $3 ); }
	| PRINTLN '(' Exp ')' ';' { $$ = new CPrintStm( $3 ); }
	| ID '=' Exp ';' { $$ = new CAssignStm $1, $3 ); }
	| ID '[' Exp ']' '=' Exp ';' { $$ = new CAssignSubscriptStm( $1, $3, $6 ); }

Exp:
	Exp PLUS Exp { $$ = new COpExp( $1, COpExp::TOperation::PLUS, $3 ); }
	| Exp MINUS Exp { $$ = new COpExp( $1, COpExp::TOperation::Minus, $3 ); }
	| Exp TIMES Exp { $$ = new COpExp( $1, COpExp::TOperation::TIMES, $3 ); }
	| Exp AND Exp { $$ = new CLogicalExp( $1, CLogicalExp::O_And, $3 ); }
	//| Exp '<' Exp { $$ = new CCompareExp( $1, CCompareExp::O_Less, $3 ); }
	//| '-' Exp %prec T_UMinus { $$ = new CUnariMinusExp( $2 ); } 


%%