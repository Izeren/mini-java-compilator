%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string>
    #include <stdbool.h>
       
    #define YYERROR_VERBOSE 1        
%}

%code {
int yylex (void);
void yyerror ( const IProgram*&, char const * );
}

%error-verbose // более подробная информация об ошибке
%verbose // output-файл с правилами грамматики
%parse-param { const IProgram*& program } // результат работы анализатора
%locations  // Подключаем yylloc без появления @n в коде

%union {

	const IProgram* Program; // Указатель на класс-программу
	const IClass* Class; // Указатель на главный класс
	const IStatement* Statement;
	const IExpression* Exp;
}

%token CLASS

%token EXTENDS

%token PUBLIC

%token PRINTLN

%token PRINT

%token INT

%token BOOLEAN

%token IF

%token ELSE

%token NUM

%token WHILE

%token TRUE

%token FALSE

%token THIS

%token NEW

%token RETURN

%token ID

%token LPAREN

%token RPAREN

%token LBRACKET

%token RBRACKET

%token LBRACE

%token RBRACE

%token COMMA

%token DOT

%token SEMI

%token COMMENT

%token AND

%token PLUS

%token MINUS

%token TIMES

%token STATIC

%token VOID

%token MAIN

%token STRING

%token LESS

%token GREATER

%token EQUALS



// Особые (типизированные) токены
%type <Program> Program
%type <Exp> Exp
%type <Class> MainClass
%type <Class> Class
%type <Class> ClassDeclList
%type <Statement> Statement
%type <Statement> StatementList

%%


Program:
	MainClass { Program = $$ = new CProgram( $1 ); }
	| MainClass ClassDeclList { Program = $$ = new CProgram( $1, $2); }
	;

MainClass: 
	CLASS ID LBRACE 
		PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN
		LBRACE 
			Statement 
		RBRACE 
	RBRACE
	{
		$$ = 0; //new CMainClass( $2, $12, $15 );
	}
	;

Class: 
	CLASS ID LBRACE Statement RBRACE { $$ = 0 }//new CClass( $2, $4 ) }
	;

ClassDeclList:
	Class
	| Class ClassDeclList
	;

StatementList:
	Statement
	| Statement StatementList
	;

//Список классов
Statement:
	LBRACE StatementList RBRACE { $$ = new CCompoundStm( $2 ); }
	| IF LPAREN Exp RPAREN Statement ELSE Statement { $$ = new CIfStm( $3, $5, $7 ); }
	| WHILE LPAREN Exp RPAREN Statement { $$ = new CWhileStm( $3, $5 ); }
	| PRINT LPAREN Exp RPAREN SEMI { $$ = new CPrintStm( $3 ); }
	| PRINTLN LPAREN Exp RPAREN SEMI { $$ = new CPrintStm( $3 ); }
	| ID EQUALS Exp SEMI { $$ = new CAssignStm( $1, $3 ); }
	| ID LBRACKET Exp RBRACKET EQUALS Exp SEMI { $$ = new CAssignSubscriptStm( $1, $3, $6 ); }
	;

Exp:
	Exp PLUS Exp { $$ = new COpExp( $1, COpExp::TOperation::PLUS, $3 ); }
	| Exp MINUS Exp { $$ = new COpExp( $1, COpExp::TOperation::Minus, $3 ); }
	| Exp TIMES Exp { $$ = new COpExp( $1, COpExp::TOperation::TIMES, $3 ); }
	| Exp AND Exp { $$ = new CLogicalExp( $1, CLogicalExp::O_And, $3 ); }
	//| Exp LESS Exp { $$ = new CCompareExp( $1, CCompareExp::O_Less, $3 ); }
	//| MINUS Exp %prec T_UMinus { $$ = new CUnariMinusExp( $2 ); } 
	;

%%