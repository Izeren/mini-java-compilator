%code requires {
    #include <stdio.h>
    #include <stdlib.h>
    #include <string>
    #include <stdbool.h>
    #include "shared_ptrs_nodes/Expressions.h"
	#include "shared_ptrs_nodes/Statements.h"
	#include "shared_ptrs_nodes/Classes.h"
	#include <iostream>

       
    #define YYERROR_VERBOSE 1        
}

%code {    
int yylex (void);
int yyerror ( CProgram **program, const char * );
}

%error-verbose // более подробная информация об ошибке
%verbose // output-файл с правилами грамматики
%parse-param { CProgram** program } // результат работы анализатора
%locations  // Подключаем yylloc без появления @n в коде

%union {

	CProgram* Program; // Указатель на класс-программу
	CClass* Class; // Указатель класс
	CClassList* ClassDeclarationList;
	IStatement* Statement;
	IExpression* Expression;
	CType* Type;
	CField* VarDeclaration;
	CFieldList* VarDeclaratitionList;
	CArgument* Argument;
	CArgumentList* ArgumentList;
	CArgumentList* NonEmptyArgumentList;
	CMethod* MethodDeclaration;
	CMethodList* MethodDeclarationList;
	CMainMethod* MainMethod;
	CMainClass* MainClass;
	CExpList* ExpressionList;
	CExpList* NonEmptyExpressionList;
	char *string;
	CIdExp* Idenifier;
}

%token NEW CLASS EXTENDS THIS RETURN

%token PUBLIC PRIVATE STATIC

%token PRINTLN

%token INT BOOLEAN

%token VOID INT_ARRAY LENGTH

%token TRUE FALSE

%token WHILE IF ELSE

%token <string> NUM

%token <string> ID

%token LPAREN RPAREN

%token LBRACKET RBRACKET

%token LBRACE RBRACE

%token COMMA DOT SEMI

//%token COMMENT

%token AND OR

%token PLUS MINUS TIMES MOD

%token MAIN

%token STRING

%token LESS GREATER NOT

%token ASSIGN

%left LBRACKET DOT LPAREN
%right NOT
%left TIMES MOD
%left MINUS PLUS
%left LESS
%left AND
%left OR
%right ASSIGN

// Особые (типизированные) токены
%type <Program> Program
%type <Expression> Expression
%type <MainClass> MainClass
%type <Class> Class
%type <ClassDeclarationList> ClassDeclarationList
%type <Statement> Statement
%type <Statement> StatementList
%type <MainMethod> MainMethod
%type <MethodDeclaration> MethodDeclaration
%type <MethodDeclarationList> MethodDeclarationList
%type <VarDeclaration> VarDeclaration
%type <VarDeclaratitionList> VarDeclaratitionList
%type <Argument> Argument
%type <Type> Type
%type <ArgumentList> ArgumentList
%type <NonEmptyArgumentList> NonEmptyArgumentList
%type <ExpressionList> ExpressionList
%type <NonEmptyExpressionList> NonEmptyExpressionList
%type <Idenifier> Idenifier

%%

Program:
	MainClass ClassDeclarationList { *program = $$ = new CProgram( $1, $2 ); }
	;

MainClass:
	CLASS Idenifier LBRACE 
		MainMethod
	RBRACE
	{	
		$$ = new CMainClass( $2, $4 );
	}
	;

MainMethod:
	PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Idenifier RPAREN
	LBRACE
		VarDeclaratitionList
		StatementList
	RBRACE 
	{	
		$$ = new CMainMethod( 0, $9, (CFieldList *) $12,(CCompoundStm *)$13 );
	}
	;

ClassDeclarationList:
	%empty { $$ = new CClassList(); }
	|
	ClassDeclarationList Class { $$ = $1; $1->Add($2); }
	;

Class:
	CLASS Idenifier LBRACE
		VarDeclaratitionList
		MethodDeclarationList
	RBRACE { $$ = new CClass( $2, 0, $4, $5 ); }
	| 
	CLASS Idenifier EXTENDS Idenifier LBRACE
		VarDeclaratitionList
		MethodDeclarationList
	RBRACE { $$ = new CClass( $2, $4, $6, $7 ); } 
	;

MethodDeclaration:
	PUBLIC Type Idenifier LPAREN ArgumentList RPAREN LBRACE 
		VarDeclaratitionList
		StatementList
		RETURN Expression SEMI
	RBRACE
	//true means public
	{ $$ = new CMethod( $2, $11, $3, $5, (CFieldList *)$8,(CCompoundStm *)$9, true ); }
	|
	//false means private
	PRIVATE Type Idenifier LPAREN ArgumentList RPAREN LBRACE 
		VarDeclaratitionList
		StatementList
		RETURN Expression SEMI
	RBRACE
	{ $$ = new CMethod( $2, $11, $3, $5, (CFieldList *)$8, (CCompoundStm *)$9, false ); }
	;

MethodDeclarationList:
	%empty { $$ = new CMethodList(); }
	|
	MethodDeclarationList MethodDeclaration { $$ = $1; $1->Add($2); }
	;

VarDeclaration:
	Type Idenifier SEMI { $$ = new CField( $1, $2 ); }
	;

VarDeclaratitionList:
	%empty { $$ = new CFieldList(); }
	|
	VarDeclaratitionList VarDeclaration { $$ = $1; $1->Add( $2 ); }
	;

Argument:
	Type Idenifier { $$ = new CArgument( $1, $2 ); }
	;

Type:
	INT_ARRAY { $$ = new CType( enums::TPrimitiveType::INT_ARRAY ); }
	|
	BOOLEAN { $$ = new CType( enums::TPrimitiveType::BOOLEAN ); }
	|
	INT { $$ = new CType( enums::TPrimitiveType::INT ); }
	|
	Idenifier { $$ = new CType( $1 ); }
	;

NonEmptyArgumentList:
	Argument { $$ = new CArgumentList($1); }
	|
	NonEmptyArgumentList COMMA Argument { $$ = $1; $1->Add($3); }
	;

ArgumentList:
	%empty { $$ = new ArgumentList(); }
	|
	NonEmptyArgumentList { $$ = $1; }
	;

StatementList:
	%empty {$$ = StatementList(); }
	|
	Statement StatementList { $$ = $2; $2->Add($1); }
	;

Statement:
	LBRACE StatementList RBRACE { $$ = $2; }
	| 
	IF LPAREN Expression RPAREN Statement ELSE Statement { $$ = new CIfStm( $3, $5, $7 ); }
	| 
	WHILE LPAREN Expression RPAREN Statement { $$ = new CWhileStm( $3, $5 ); }
	| 
	PRINTLN LPAREN Expression RPAREN SEMI { $$ = new CPrintStm( $3 ); }
	| 
	Idenifier ASSIGN Expression SEMI { $$ = new CAssignStm( $1, $3 ); }
	| 
	Idenifier LBRACKET Expression RBRACKET ASSIGN Expression SEMI { $$ = new CAssignSubscriptStm( $1, (CNumExp *)$3, $6 ); }
	;

Expression:
	Expression PLUS Expression { $$ = new COpExp( $1, $3, enums::TOperation::PLUS ); }
	|
	Expression MINUS Expression { $$ = new COpExp( $1, $3, enums::TOperation::MINUS ); }
	|
	Expression TIMES Expression { $$ = new COpExp( $1, $3, enums::TOperation::MULTIPLY ); }
	|
	Expression AND Expression { $$ = new CLogOpExp( $1, $3, enums::TLogicalOperation::AND ); }
	|
	Expression OR Expression { $$ = new CLogOpExp( $1, $3, enums::TLogicalOperation::OR ); }
	|
	Expression LESS Expression { $$ = new CCompExp( $1, $3, enums::TCompareOperation::LESS ); }
	|
	Expression GREATER Expression { $$ = new CCompExp( $1, $3, enums::TCompareOperation::GREATER ); }
	|
	Expression MOD Expression { $$ = new COpExp( $1, $3, enums::TOperation::MOD ); }
	|
	Expression LBRACKET Expression RBRACKET { $$ = new CByIndexExpression((CArrayExpression*) $1, $3); }
	|
	Expression DOT LENGTH { $$ = new CGetLengthExp( (CArrayExpression*) $1 ); }
	|
	Expression DOT Idenifier LPAREN ExpressionList RPAREN { $$ = new CCallMethodExp( (CClass*) $1, $3, (CExpList*) $5) ; }
	|
	MINUS NUM { $$ = new CNumExp( (std::string("-") + std::string($2)).c_str() ); }
	|
	NUM { $$ = new CNumExp($1); }
	|
	TRUE { $$ = new CLogExp(true); }
	|
	FALSE { $$ = new CLogExp(false); }
	|
	Idenifier { $$ = $1; }
	|
	THIS { $$ = new CThisExpression(); }
	|
	NEW INT LBRACKET Expression RBRACKET { $$ = new CArrayExpression($4); }
	|
	NEW Idenifier LPAREN RPAREN { $$ = $2; }
	|
	NOT Expression { $$ = new CNegativeExpression($2); }
	|
	LPAREN Expression RPAREN { $$ = $2; }	
	;

NonEmptyExpressionList:
	Expression { $$ = new CExpList($1); }
	|
	NonEmptyExpressionList COMMA Expression { $$ = $1; $1->Add($3); }
	;

ExpressionList:
	%empty { $$ = new CExpList(); }
	|
	NonEmptyExpressionList { $$ = $1; }
	;

Idenifier:
	ID { $$ = new CIdExp( $1 ); }
	;

%%

int yyerror(std::string s) {
  return -1;
}

int yyerror(CProgram **program, const char *s) {
	std::cout << s << "\n";
	std::cout << "Something went wrong\n";
	return yyerror(std::string(s));
}